
InterruptTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d3  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083c  00000000  00000000  00001c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d1  00000000  00000000  0000244b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085e  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001151  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000048d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  9e:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z11LCD_Commandh>:
	//Wait till for Byte to be received in "UDR0" register.
	loop_until_bit_is_set(UCSR0A,RXC0);
	
	//Return the Byte that is in the "UDR0" register.
	return UDR0;
}
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	28 2f       	mov	r18, r24
  ac:	20 7f       	andi	r18, 0xF0	; 240
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	28 98       	cbi	0x05, 0	; 5
  b4:	2c 9a       	sbi	0x05, 4	; 5
  b6:	35 e0       	ldi	r19, 0x05	; 5
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <_Z11LCD_Commandh+0x12>
  bc:	00 00       	nop
  be:	2c 98       	cbi	0x05, 4	; 5
  c0:	ef e1       	ldi	r30, 0x1F	; 31
  c2:	f3 e0       	ldi	r31, 0x03	; 3
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <_Z11LCD_Commandh+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <_Z11LCD_Commandh+0x24>
  ca:	00 00       	nop
  cc:	2b b1       	in	r18, 0x0b	; 11
  ce:	2f 70       	andi	r18, 0x0F	; 15
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	82 2b       	or	r24, r18
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2c 9a       	sbi	0x05, 4	; 5
  de:	35 e0       	ldi	r19, 0x05	; 5
  e0:	3a 95       	dec	r19
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z11LCD_Commandh+0x3a>
  e4:	00 00       	nop
  e6:	2c 98       	cbi	0x05, 4	; 5
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9f e1       	ldi	r25, 0x1F	; 31
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <_Z11LCD_Commandh+0x46>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_Z11LCD_Commandh+0x4c>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <_Z8LCD_Initv>:
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	9a b9       	out	0x0a, r25	; 10
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	89 63       	ori	r24, 0x39	; 57
  fe:	84 b9       	out	0x04, r24	; 4
 100:	94 b9       	out	0x04, r25	; 4
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <_Z8LCD_Initv+0x12>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z8LCD_Initv+0x1c>
 112:	00 00       	nop
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9f e1       	ldi	r25, 0x1F	; 31
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <_Z8LCD_Initv+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_Z8LCD_Initv+0x2e>
 124:	00 00       	nop
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9f e1       	ldi	r25, 0x1F	; 31
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <_Z8LCD_Initv+0x58>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z8LCD_Initv+0x5e>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <_Z8LCD_Charh>:
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	9f 70       	andi	r25, 0x0F	; 15
 15c:	28 2f       	mov	r18, r24
 15e:	20 7f       	andi	r18, 0xF0	; 240
 160:	92 2b       	or	r25, r18
 162:	9b b9       	out	0x0b, r25	; 11
 164:	28 9a       	sbi	0x05, 0	; 5
 166:	2c 9a       	sbi	0x05, 4	; 5
 168:	35 e0       	ldi	r19, 0x05	; 5
 16a:	3a 95       	dec	r19
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z8LCD_Charh+0x12>
 16e:	00 00       	nop
 170:	2c 98       	cbi	0x05, 4	; 5
 172:	ef e1       	ldi	r30, 0x1F	; 31
 174:	f3 e0       	ldi	r31, 0x03	; 3
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_Z8LCD_Charh+0x1e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z8LCD_Charh+0x24>
 17c:	00 00       	nop
 17e:	2b b1       	in	r18, 0x0b	; 11
 180:	2f 70       	andi	r18, 0x0F	; 15
 182:	f0 e1       	ldi	r31, 0x10	; 16
 184:	8f 9f       	mul	r24, r31
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	82 2b       	or	r24, r18
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	2c 9a       	sbi	0x05, 4	; 5
 190:	35 e0       	ldi	r19, 0x05	; 5
 192:	3a 95       	dec	r19
 194:	f1 f7       	brne	.-4      	; 0x192 <_Z8LCD_Charh+0x3a>
 196:	00 00       	nop
 198:	2c 98       	cbi	0x05, 4	; 5
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9f e1       	ldi	r25, 0x1F	; 31
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z8LCD_Charh+0x46>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z8LCD_Charh+0x4c>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <_Z9LCD_printPKc>:
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	79 f0       	breq	.+30     	; 0x1d4 <_Z9LCD_printPKc+0x2c>
 1b6:	8f 01       	movw	r16, r30
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8LCD_Charh>
 1be:	85 ed       	ldi	r24, 0xD5	; 213
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_Z9LCD_printPKc+0x18>
 1c4:	00 00       	nop
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	f8 01       	movw	r30, r16
 1ca:	ec 0f       	add	r30, r28
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 81       	ld	r24, Z
 1d0:	81 11       	cpse	r24, r1
 1d2:	f3 cf       	rjmp	.-26     	; 0x1ba <_Z9LCD_printPKc+0x12>
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <_Z21LCD_set_DDRAM_addressi>:
 1dc:	80 58       	subi	r24, 0x80	; 128
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11LCD_Commandh>
 1e2:	85 ed       	ldi	r24, 0xD5	; 213
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z21LCD_set_DDRAM_addressi+0x8>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <_Z18LCD_go_to_locationhh>:
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_Z18LCD_go_to_locationhh+0x6>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <_Z18LCD_go_to_locationhh+0x8>
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	1a 82       	std	Y+2, r1	; 0x02
 1fa:	19 82       	std	Y+1, r1	; 0x01
 1fc:	20 e4       	ldi	r18, 0x40	; 64
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	3c 83       	std	Y+4, r19	; 0x04
 202:	2b 83       	std	Y+3, r18	; 0x03
 204:	e6 2f       	mov	r30, r22
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	21 81       	ldd	r18, Z+1	; 0x01
 212:	32 81       	ldd	r19, Z+2	; 0x02
 214:	a9 01       	movw	r20, r18
 216:	48 0f       	add	r20, r24
 218:	51 1d       	adc	r21, r1
 21a:	ca 01       	movw	r24, r20
 21c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z21LCD_set_DDRAM_addressi>
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <_Z20LCD_print_ToLocationhhPKc>:
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ea 01       	movw	r28, r20
 234:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z18LCD_go_to_locationhh>
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9LCD_printPKc>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <_Z23LCD_printInt_toLocationhhii>:
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	d8 2e       	mov	r13, r24
 25a:	c6 2e       	mov	r12, r22
 25c:	ca 01       	movw	r24, r20
 25e:	ed b6       	in	r14, 0x3d	; 61
 260:	fe b6       	in	r15, 0x3e	; 62
 262:	4d b7       	in	r20, 0x3d	; 61
 264:	5e b7       	in	r21, 0x3e	; 62
 266:	42 1b       	sub	r20, r18
 268:	53 0b       	sbc	r21, r19
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	5e bf       	out	0x3e, r21	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	4d bf       	out	0x3d, r20	; 61
 274:	0d b7       	in	r16, 0x3d	; 61
 276:	1e b7       	in	r17, 0x3e	; 62
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	4a e0       	ldi	r20, 0x0A	; 10
 27e:	b8 01       	movw	r22, r16
 280:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__itoa_ncheck>
 284:	a8 01       	movw	r20, r16
 286:	6c 2d       	mov	r22, r12
 288:	8d 2d       	mov	r24, r13
 28a:	0e 94 17 01 	call	0x22e	; 0x22e <_Z20LCD_print_ToLocationhhPKc>
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	fe be       	out	0x3e, r15	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	ed be       	out	0x3d, r14	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	08 95       	ret

000002aa <_Z10USART_initv>:
 2aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2b4:	e1 ec       	ldi	r30, 0xC1	; 193
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	88 e1       	ldi	r24, 0x18	; 24
 2ba:	80 83       	st	Z, r24
 2bc:	80 81       	ld	r24, Z
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2c4:	08 95       	ret

000002c6 <_Z18USART_transmitByteh>:
 2c6:	e0 ec       	ldi	r30, 0xC0	; 192
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	90 81       	ld	r25, Z
 2cc:	95 ff       	sbrs	r25, 5
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <_Z18USART_transmitByteh+0x4>
 2d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d4:	08 95       	ret

000002d6 <_Z11printStringPKc>:

//Sending a string function.
void printString(const char C[])
{
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	fc 01       	movw	r30, r24
	uint8_t i=0;
	while(C[i])
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	59 f0       	breq	.+22     	; 0x2fa <_Z11printStringPKc+0x24>
 2e4:	8f 01       	movw	r16, r30
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		USART_transmitByte(C[i]);
 2e8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z18USART_transmitByteh>
		i++;
 2ec:	cf 5f       	subi	r28, 0xFF	; 255

//Sending a string function.
void printString(const char C[])
{
	uint8_t i=0;
	while(C[i])
 2ee:	f8 01       	movw	r30, r16
 2f0:	ec 0f       	add	r30, r28
 2f2:	f1 1d       	adc	r31, r1
 2f4:	80 81       	ld	r24, Z
 2f6:	81 11       	cpse	r24, r1
 2f8:	f7 cf       	rjmp	.-18     	; 0x2e8 <_Z11printStringPKc+0x12>
	{
		USART_transmitByte(C[i]);
		i++;
	}
	
}
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <_Z8printIntii>:

void printInt(int value , int nOfDigits)
{
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	itoa(value, nToString, 10);
	
	printString(nToString);
	//LCD_print(" ");

}
 312:	ed b6       	in	r14, 0x3d	; 61
 314:	fe b6       	in	r15, 0x3e	; 62
	
}

void printInt(int value , int nOfDigits)
{
	char nToString[nOfDigits];
 316:	2d b7       	in	r18, 0x3d	; 61
 318:	3e b7       	in	r19, 0x3e	; 62
 31a:	26 1b       	sub	r18, r22
 31c:	37 0b       	sbc	r19, r23
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	3e bf       	out	0x3e, r19	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	2d bf       	out	0x3d, r18	; 61
 328:	0d b7       	in	r16, 0x3d	; 61
 32a:	1e b7       	in	r17, 0x3e	; 62
 32c:	0f 5f       	subi	r16, 0xFF	; 255
 32e:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 330:	4a e0       	ldi	r20, 0x0A	; 10
 332:	b8 01       	movw	r22, r16
 334:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__itoa_ncheck>
	itoa(value, nToString, 10);
	
	printString(nToString);
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z11printStringPKc>
	//LCD_print(" ");

}
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	fe be       	out	0x3e, r15	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	ed be       	out	0x3d, r14	; 61
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <main>:
#include <avr/interrupt.h>

int c;
int main(void)
{
	USART_init();
 356:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z10USART_initv>
	LCD_Init();
 35a:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z8LCD_Initv>
	//TCCR1A = 0;
	//TCCR1B |= 1<<WGM12 | 1<<CS12 | 1<<CS10;
	EICRA |= 1<<ISC01; //11 for rising -- 10 for falling
 35e:	e9 e6       	ldi	r30, 0x69	; 105
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	82 60       	ori	r24, 0x02	; 2
 366:	80 83       	st	Z, r24
	EIMSK |= 1<<INT0;
 368:	e8 9a       	sbi	0x1d, 0	; 29
	//TIMSK1 |= 1<<OCIE1A;
	//OCR1A = 15625;
	sei();
 36a:	78 94       	sei
	c=0;
 36c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 370:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    /* Replace with your application code */
    while (1) 
    {
			LCD_printInt_toLocation(0,0,c,2);
 374:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 378:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 37c:	22 e0       	ldi	r18, 0x02	; 2
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 22 01 	call	0x244	; 0x244 <_Z23LCD_printInt_toLocationhhii>
			printInt(c,2);
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 390:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 394:	0e 94 81 01 	call	0x302	; 0x302 <_Z8printIntii>
			printString("\n");
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z11printStringPKc>
 3a0:	e9 cf       	rjmp	.-46     	; 0x374 <main+0x1e>

000003a2 <__vector_1>:
    }
}

ISR(INT0_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
	c++;
 3b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__itoa_ncheck>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	4a 30       	cpi	r20, 0x0A	; 10
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <__itoa_ncheck+0x12>
 3d6:	99 23       	and	r25, r25
 3d8:	22 f4       	brpl	.+8      	; 0x3e2 <__itoa_ncheck+0x12>
 3da:	bd e2       	ldi	r27, 0x2D	; 45
 3dc:	90 95       	com	r25
 3de:	81 95       	neg	r24
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__utoa_common>

000003e6 <__utoa_ncheck>:
 3e6:	bb 27       	eor	r27, r27

000003e8 <__utoa_common>:
 3e8:	fb 01       	movw	r30, r22
 3ea:	55 27       	eor	r21, r21
 3ec:	aa 27       	eor	r26, r26
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	aa 1f       	adc	r26, r26
 3f4:	a4 17       	cp	r26, r20
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <__utoa_common+0x14>
 3f8:	a4 1b       	sub	r26, r20
 3fa:	83 95       	inc	r24
 3fc:	50 51       	subi	r21, 0x10	; 16
 3fe:	b9 f7       	brne	.-18     	; 0x3ee <__utoa_common+0x6>
 400:	a0 5d       	subi	r26, 0xD0	; 208
 402:	aa 33       	cpi	r26, 0x3A	; 58
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	a9 5d       	subi	r26, 0xD9	; 217
 408:	a1 93       	st	Z+, r26
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	79 f7       	brne	.-34     	; 0x3ec <__utoa_common+0x4>
 40e:	b1 11       	cpse	r27, r1
 410:	b1 93       	st	Z+, r27
 412:	11 92       	st	Z+, r1
 414:	cb 01       	movw	r24, r22
 416:	0c 94 0d 02 	jmp	0x41a	; 0x41a <strrev>

0000041a <strrev>:
 41a:	dc 01       	movw	r26, r24
 41c:	fc 01       	movw	r30, r24
 41e:	67 2f       	mov	r22, r23
 420:	71 91       	ld	r23, Z+
 422:	77 23       	and	r23, r23
 424:	e1 f7       	brne	.-8      	; 0x41e <strrev+0x4>
 426:	32 97       	sbiw	r30, 0x02	; 2
 428:	04 c0       	rjmp	.+8      	; 0x432 <strrev+0x18>
 42a:	7c 91       	ld	r23, X
 42c:	6d 93       	st	X+, r22
 42e:	70 83       	st	Z, r23
 430:	62 91       	ld	r22, -Z
 432:	ae 17       	cp	r26, r30
 434:	bf 07       	cpc	r27, r31
 436:	c8 f3       	brcs	.-14     	; 0x42a <strrev+0x10>
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
